<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
           
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
<!--&lt;!&ndash;指定MVC的配置文件地址和名称，如果不指定呢？ 不指定也行，
不指定的话，SpringMVC会自动的去/WEB-INF下找：前端控制器名-servlet.xml的文件
&ndash;&gt; -->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
<!-- servlet启动加载，servlet原本是第一次访问创建对象：
load-on-startup服务器启动的时候创建对象，值越小优先级越高，越先创建对象-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- / 表示应答所有请求
        /* 和/ 的区别： /*的范围更大，还会把*.jsp这些进行拦截，一旦拦截jsp页面，就不能显示了
        / 也会拦截所有请求，但是不会拦截*.jsp，这就保证了jsp页面的正常访问,但是HTML页面也还是会拦截的

        处理*.jsp是tomcat做的事，所有项目的小web.xml都继承于大web.xml
        在tomcat大的web.xml，有一个DefaultServlet,用来拦截静态资源 它的拦截范围也是 /
        只有jsp和servlet是动态资源，其他一律都是静态的，
        也就是说当我们自己配置了 / 来拦截的话，就是顶替了tomcat中web.xml的DefaultServlet的
        也就是说当你这样配了以后，你顶替了tomcat中的，那你访问静态页面就会来到前端控制器，如果它能映射到就处理
        如果映射不到，就报错，这就是你写一个index.html但是又没有对应的映射与之对应会报错的原因

        为什么jsp又能访问：因为我们没有覆盖服务器中的JspServlet的配置
 /* 直接就是拦截所有请求，把Tomcat中所有的servlet都顶替了。 我们写/ 也是为了迎合后来的Rest风格的URL地址

        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>